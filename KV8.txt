#1
1) Пропустите код, который зависит напрямую от правильности предположения.
2) Из функции возвращайте код ошибки обратно в caller и позволяйте caller-у обработать эту ошибку.
3) Если нужно немедленно завершить программу, то используйте функцию exit(), которая находится в 
заголовочном файле cstdlib, для возврата кода ошибки обратно в операционную систему.
4) Если пользователь ввел данные не того типа, что нужно — попросите пользователя ввести данные еще раз.
5) Используйте cerr. cerr — это объект вывода (как и cout), который находится в заголовочном файле iostream 
и выводит сообщения об ошибках в консоль (как и cout), но только эти сообщения можно еще и перенаправить в 
отдельный файл с ошибками. Т.е. основное отличие cerr от cout заключается в том, что cerr целенаправленно 
используется для вывода сообщений об ошибках, тогда как cout — для вывода всего остального.
6) Если вы работаете в какой-то графической среде, то распространенной практикой является вывод всплывающего 
окна с кодом ошибки, а затем немедленное завершение программы. То, как это сделать, зависит от конкретной среды разработки.

#2
Пишется много кода, непонятно структурирован и появляется много повторий строчек кода.

#3
1) Исключения отделяют код обработки ошибок от нормального алгоритма программы, тем самым повышая разборчивость, надежность и расширяемость кода.
2) Генерация исключения – единственный чистый способ сообщить об ошибке из конструктора.
3) Исключения трудно игнорировать, в отличие от кодов ошибок.
4) Исключения легко передаются из глубоко вложенных функций.
5) Исключения могут быть, и часто являются, определяемыми пользователем типами, содержащими гораздо больше информации, чем код ошибки.
6) Объекты исключений сопоставляются с обработчиками с помощью системы типов.

#4
Спецификатор noexcept определяет функцию как не выбрасывающую исключений. Чтобы определить функцию как не выбрасывающую, 
мы можем использовать спецификатор noexcept в объявлении функции, поместив его справа от списка параметров функции:
void doSomething() noexcept;
Оператор noexcept может использоваться внутри функций. Он принимает в качестве аргумента выражение и возвращает 
true или false, если компилятор считает, что выражение не может или может выбросить исключение. Оператор noexcept 
проверяется статически во время компиляции и фактически не вычисляет входное выражение.

#5
Гарантии безопасности исключений — это договоренности о том, как функции или классы будут вести себя в случае возникновения исключений. 
Существуют 4 уровня безопасности исключений:
1) Нет никаких гарантий — нет никаких гарантий относительно того, что произойдет, если возникнет исключение 
(например, класс может быть оставлен в непригодном для использования состоянии).
2) Базовая гарантия — если возникнет исключение, то утечки памяти не произойдет (все ресурсы будут освобождены корректно), 
и объект все еще будет использоваться, но программа может быть оставлена в измененном состоянии.
3) Строгая гарантия — если возникнет исключение, то утечки памяти не произойдет (все ресурсы будут освобождены корректно), 
состояние программы не будет изменено. Это означает, что функция должна корректно завершить свою работу, 
либо не иметь побочных эффектов в случае, если функция аварийно завершила свою работу. Простыми словами — если при 
выполнении операции возникнет исключение, то программа останется в том же состоянии, которое было до начала выполнения операции.
4) Гарантия отсутствия исключений/сбоев — работа функции всегда завершается успешно (без сбоев) или завершается аварийно, но без выбрасывания исключений.